pipeline {
    agent any
    
    stages {
        stage("Code Checkout") {
            steps {
                echo "Cloning the code"
                git url: "https://github.com/umahanty/To-Do-Application-Deployment.git", branch: "main"
            }
        }
        
        stage("Build Docker Image") {
            steps {
                echo "Building the image"
                catchError(buildResult: 'UNSTABLE') {
                    sh "docker build -t flask-app ."
                }
            }
        }
        
        stage("Push To Docker Hub") {
            steps {
                echo "pushing to docker hub"
                withCredentials([usernamePassword(credentialsId:"dockerHub",passwordVariable:"dockerHubPass",usernameVariable:"dockerHubUser")]){
                sh "docker tag flask-app ${env.dockerHubUser}/flask-app:latest"
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPass}"
                sh "docker push ${env.dockerHubUser}/flask-app:latest"
                    }
                }
            }
        }
        
        stage("Deploy") {
            steps {
                echo "Deploying to container"
                catchError(buildResult: 'UNSTABLE') {
                    sh "docker run -d -p 5000:5000 ${env.dockeridUser}/flask-app:latest"
                    // Add a delay to allow the container to start up completely
                    sleep 30
                }
            }
        }

        stage("Selenium Test") {
            steps {
                echo "Running Selenium tests"
                
                catchError(buildResult: 'UNSTABLE') {
                    // Install Selenium and ChromeDriver
                    sh "python3 -m pip install selenium"
                    sh "apk add chromium chromium-chromedriver"

                    // Import required libraries
                    sh "wget https://raw.githubusercontent.com/berstend/puppeteer-extra/master/dist/puppeteer-extra.min.js"
                    sh "wget https://raw.githubusercontent.com/berstend/puppeteer-extra/main/dist/plugins/block-resources.min.js"
                    
                    // Run Selenium tests
                    sh """
python <<EOF
import time
import unittest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

class TestFlaskApp(unittest.TestCase):
    def setUp(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-software-rasterizer")
        chrome_options.add_argument("--disable-setuid-sandbox")
        chrome_options.add_argument("--window-size=1920x1080")
        chrome_options.add_argument("--start-maximized")

        self.driver = webdriver.Chrome(options=options)
        self.driver.implicitly_wait(10)
        self.driver.get("http://127.0.0.0:5000/")

    def tearDown(self):
        self.driver.quit()

    def test_add_task(self):
        print("Adding tasks...")
        # Find the input field and submit button for adding a task
        input_field = self.driver.find_element(By.XPATH, "//*[@id='taskContent']")
        submit_button = self.driver.find_element(By.XPATH, "//*[@id='addTaskForm']/button")

        # Add three tasks
        for i in range(3):
            task_name = f"New task {i+1}"
            input_field.send_keys(task_name)
            submit_button.click()
            print(f"Added task: {task_name}")

            # Add a small delay to ensure the task is added before adding the next one
            time.sleep(1)

            # Re-find the input field after clicking the submit button
            input_field = self.driver.find_element(By.XPATH, "//*[@id='taskContent']")
            submit_button = self.driver.find_element(By.XPATH, "//*[@id='addTaskForm']/button")

        # Check if the tasks are added
        task_elements = self.driver.find_elements(By.CLASS_NAME, "taskContent")
        self.assertEqual(len(task_elements), 3)
        print("Tasks added successfully.")

        # Find all "Mark as Complete" buttons and click on them
        complete_buttons = self.driver.find_elements(By.CLASS_NAME, "completeButton")
        print(f"Total Mark as Complete buttons: {len(complete_buttons)}")
        for _ in range(len(complete_buttons)):
            complete_buttons = self.driver.find_elements(By.CLASS_NAME, "completeButton")  # Re-find the buttons
            complete_buttons[0].click()
            print("Clicked on Mark as Complete button.")

        # Verify if all tasks are marked as completed
        completed_tasks = self.driver.find_elements(By.CLASS_NAME, "completed")
        self.assertEqual(len(completed_tasks), 3)
        print("All tasks marked as completed.")

        # Find all "Delete" buttons and click on them
        delete_buttons = self.driver.find_elements(By.CLASS_NAME, "deleteButton")
        print(f"Total Delete buttons: {len(delete_buttons)}")

        for _ in range(len(delete_buttons)):
            delete_buttons = self.driver.find_elements(By.CLASS_NAME, "deleteButton")
            delete_buttons[0].click()
            print("Clicked on Delete button.")

        # Verify if all tasks are deleted
        remaining_tasks = self.driver.find_elements(By.CLASS_NAME, "taskContent")
        self.assertEqual(len(remaining_tasks), 0)
        print("All tasks deleted.")

if __name__ == "__main__":
    unittest.main()
EOF
"""
                }
            }
        }
    }
}
